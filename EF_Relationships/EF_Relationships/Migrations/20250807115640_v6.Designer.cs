// <auto-generated />
using System;
using EF_Relationships.Model;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EF_Relationships.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250807115640_v6")]
    partial class v6
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("int");

                    b.Property<int>("StudentsId")
                        .HasColumnType("int");

                    b.HasKey("CoursesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("EF_Relationships.Model.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "أجهزة إلكترونية وتقنية متطورة",
                            Name = "إلكترونيات"
                        },
                        new
                        {
                            Id = 2,
                            Description = "كتب علمية وثقافية منوعة",
                            Name = "كتب"
                        },
                        new
                        {
                            Id = 3,
                            Description = "ملابس عصرية للرجال والنساء",
                            Name = "ملابس"
                        },
                        new
                        {
                            Id = 4,
                            Description = "معدات وأدوات رياضية",
                            Name = "رياضة"
                        },
                        new
                        {
                            Id = 5,
                            Description = "أدوات منزلية ومعدات حديقة",
                            Name = "منزل وحديقة"
                        });
                });

            modelBuilder.Entity("EF_Relationships.Model.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Credits")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Credits = 3,
                            Title = "البرمجة بـ C#"
                        },
                        new
                        {
                            Id = 2,
                            Credits = 4,
                            Title = "قواعد البيانات"
                        },
                        new
                        {
                            Id = 3,
                            Credits = 3,
                            Title = "تطوير الويب"
                        },
                        new
                        {
                            Id = 4,
                            Credits = 4,
                            Title = "هندسة البرمجيات"
                        },
                        new
                        {
                            Id = 5,
                            Credits = 3,
                            Title = "الذكاء الاصطناعي"
                        },
                        new
                        {
                            Id = 6,
                            Credits = 3,
                            Title = "أمن المعلومات"
                        },
                        new
                        {
                            Id = 7,
                            Credits = 4,
                            Title = "الشبكات والاتصالات"
                        });
                });

            modelBuilder.Entity("EF_Relationships.Model.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId")
                        .HasDatabaseName("IX_Product_CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Name = "لابتوب Dell XPS",
                            Price = 25000m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            Name = "هاتف iPhone 15",
                            Price = 18000m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Name = "تابلت Samsung Galaxy",
                            Price = 8000m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Name = "سماعات Sony WH-1000XM4",
                            Price = 3500m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 2,
                            Name = "Clean Code",
                            Price = 150m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Name = "Design Patterns",
                            Price = 200m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 2,
                            Name = "The Pragmatic Programmer",
                            Price = 180m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 3,
                            Name = "قميص قطني أزرق",
                            Price = 120m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 3,
                            Name = "جينز كلاسيكي",
                            Price = 300m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 3,
                            Name = "حذاء رياضي Nike",
                            Price = 800m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 4,
                            Name = "دراجة هوائية",
                            Price = 2500m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 4,
                            Name = "أوزان حديد",
                            Price = 500m
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 5,
                            Name = "مكنسة كهربائية",
                            Price = 1200m
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 5,
                            Name = "أدوات حديقة",
                            Price = 350m
                        });
                });

            modelBuilder.Entity("EF_Relationships.Model.Student", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ali.mohamed@student.edu",
                            Name = "علي محمد"
                        },
                        new
                        {
                            Id = 2,
                            Email = "nour.ahmed@student.edu",
                            Name = "نور أحمد"
                        },
                        new
                        {
                            Id = 3,
                            Email = "hosam.khaled@student.edu",
                            Name = "حسام خالد"
                        },
                        new
                        {
                            Id = 4,
                            Email = "reem.saad@student.edu",
                            Name = "ريم سعد"
                        },
                        new
                        {
                            Id = 5,
                            Email = "youssef.abdullah@student.edu",
                            Name = "يوسف عبدالله"
                        });
                });

            modelBuilder.Entity("EF_Relationships.Model.StudentCourse", b =>
                {
                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("Grade")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StudentId", "CourseId");

                    b.HasIndex("CourseId");

                    b.ToTable("StudentCourses");

                    b.HasData(
                        new
                        {
                            StudentId = 1,
                            CourseId = 1,
                            EnrollmentDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 85.5m,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 1,
                            CourseId = 2,
                            EnrollmentDate = new DateTime(2024, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 92.0m,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 1,
                            CourseId = 3,
                            EnrollmentDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        },
                        new
                        {
                            StudentId = 1,
                            CourseId = 4,
                            EnrollmentDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        },
                        new
                        {
                            StudentId = 2,
                            CourseId = 1,
                            EnrollmentDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 78.5m,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 2,
                            CourseId = 5,
                            EnrollmentDate = new DateTime(2024, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 88.0m,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 2,
                            CourseId = 6,
                            EnrollmentDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        },
                        new
                        {
                            StudentId = 3,
                            CourseId = 2,
                            EnrollmentDate = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 90.5m,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 3,
                            CourseId = 3,
                            EnrollmentDate = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 87.0m,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 3,
                            CourseId = 7,
                            EnrollmentDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        },
                        new
                        {
                            StudentId = 4,
                            CourseId = 4,
                            EnrollmentDate = new DateTime(2024, 1, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 95.0m,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 4,
                            CourseId = 5,
                            EnrollmentDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        },
                        new
                        {
                            StudentId = 5,
                            CourseId = 6,
                            EnrollmentDate = new DateTime(2024, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Grade = 82.5m,
                            Status = "Completed"
                        },
                        new
                        {
                            StudentId = 5,
                            CourseId = 7,
                            EnrollmentDate = new DateTime(2024, 8, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Status = "Active"
                        });
                });

            modelBuilder.Entity("EF_Relationships.Model.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "ahmed@example.com",
                            Name = "أحمد محمد"
                        },
                        new
                        {
                            Id = 2,
                            Email = "fatima@example.com",
                            Name = "فاطمة علي"
                        },
                        new
                        {
                            Id = 3,
                            Email = "mohamed@example.com",
                            Name = "محمد حسن"
                        },
                        new
                        {
                            Id = 4,
                            Email = "sara@example.com",
                            Name = "سارة أحمد"
                        },
                        new
                        {
                            Id = 5,
                            Email = "omar@example.com",
                            Name = "عمر خالد"
                        });
                });

            modelBuilder.Entity("EF_Relationships.Model.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("proFilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserProfiles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Bio = "مطور برمجيات متخصص في .NET",
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            proFilePicture = "ahmed_profile.jpg"
                        },
                        new
                        {
                            UserId = 2,
                            Bio = "مصممة UI/UX مبدعة",
                            DateOfBirth = new DateTime(1992, 8, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            proFilePicture = "fatima_profile.jpg"
                        },
                        new
                        {
                            UserId = 3,
                            Bio = "محلل بيانات وخبير في Machine Learning",
                            DateOfBirth = new DateTime(1988, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            proFilePicture = "mohamed_profile.jpg"
                        },
                        new
                        {
                            UserId = 4,
                            Bio = "مديرة مشاريع تقنية",
                            DateOfBirth = new DateTime(1991, 3, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            proFilePicture = "sara_profile.jpg"
                        },
                        new
                        {
                            UserId = 5,
                            Bio = "مهندس DevOps ومختص في Cloud Computing",
                            DateOfBirth = new DateTime(1989, 11, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            proFilePicture = "omar_profile.jpg"
                        });
                });

            modelBuilder.Entity("CourseStudent", b =>
                {
                    b.HasOne("EF_Relationships.Model.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Relationships.Model.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EF_Relationships.Model.Product", b =>
                {
                    b.HasOne("EF_Relationships.Model.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EF_Relationships.Model.StudentCourse", b =>
                {
                    b.HasOne("EF_Relationships.Model.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EF_Relationships.Model.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("EF_Relationships.Model.UserProfile", b =>
                {
                    b.HasOne("EF_Relationships.Model.User", "user")
                        .WithOne("userProfile")
                        .HasForeignKey("EF_Relationships.Model.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("EF_Relationships.Model.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EF_Relationships.Model.User", b =>
                {
                    b.Navigation("userProfile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
